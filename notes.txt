//understanding consolidation might be wrong for self use only
in src/app folder
-- create store.js

import { configureStore } from "@reduxjs/toolkit";
//import the rest of your reducers

export const store = configureStore({
    reducer: {
        posts: postsReducer,
        users: usersReducer
    }
})

-- in index.js //this is the entry point of how the app will build up
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import { store } from './app/store'; //importing the store, store has reducers which you can dispatch actions 
import { Provider } from 'react-redux';
import { fetchPosts } from './features/posts/postsSlice'; //actions are built in createSlices as such here
import { fetchUsers } from './features/users/usersSlice'; //actions are built in createSlices as such here
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; 
//in this example it is the router is build to filter for any and just route it to App.js kinda like a top level urls.py in django

store.dispatch(fetchPosts());
store.dispatch(fetchUsers());

ReactDOM.render(
  <React.StrictMode>
    <Provider store={store}>
      <Router>
        <Routes>
          <Route path="/*" element={<App />} />
        </Routes>
      </Router>
    </Provider>
  </React.StrictMode>,
  document.getElementById('root') //this is in your index.html
);


//in App.js kinda like an app level urls.py
function App() {
  return (
    <Routes>
      <Route path="/" element={<Layout />}>

        <Route index element={<PostsList />} />

        <Route path="post"> //\/post
          <Route index element={<AddPostForm />} />
          <Route path=":postId" element={<SinglePostPage />} /> //\/post?postid
          <Route path="edit/:postId" element={<EditPostForm />} /> //\/post/edit?postid
        </Route>

        <Route path="user">
          <Route index element={<UsersList />} />
          <Route path=":userId" element={<UserPage />} />
        </Route>

        {/* Catch all - replace with 404 component if you want */}
        <Route path="*" element={<Navigate to="/" replace />} />

      </Route>
    </Routes>
  );
}


--- an example of a createSlice

import { createSlice, nanoid, createAsyncThunk } from "@reduxjs/toolkit";
import { sub } from 'date-fns';
import axios from "axios";

const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';

//below are all async actions that will be brought into store state via extraReducers(builder)

			const initialState = {
			    posts: [], 
			    status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed' ---- starts off with an empty array and status 'idle' -- this is use later in jsx components to render things as status changes 
			    error: null
			}

//crud API/functionalities that changes state after getting a response from a http/network call

			export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {
			    const response = await axios.get(POSTS_URL)
			    return response.data
			})

			export const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {
			    const response = await axios.post(POSTS_URL, initialPost)
			    return response.data
			})

			export const updatePost = createAsyncThunk('posts/updatePost', async (initialPost) => {
			    const { id } = initialPost;
			    try {
			        const response = await axios.put(`${POSTS_URL}/${id}`, initialPost)
			        return response.data
			    } catch (err) {
			        //return err.message;
			        return initialPost; // only for testing Redux!
			    }
			})

			export const deletePost = createAsyncThunk('posts/deletePost', async (initialPost) => {
			    const { id } = initialPost;
			    try {
			        const response = await axios.delete(`${POSTS_URL}/${id}`)
			        if (response?.status === 200) return initialPost;
			        return `${response?.status}: ${response?.statusText}`;
			    } catch (err) {
			        return err.message;
			    }
			})

const postsSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: { //key value pair of name: reducer(state,action) --- you can use methods like push etc that mutates the state directly here because of imer.js
        postAdded: {
            reducer(state, action) {
                state.posts.push(action.payload)
            },
            prepare(title, content, userId) { //how this prepare work is that it will take in the parameters from you jsx dispatch then run logic on it to prepare a payload that will then be used by the reducer //logic to set store state 
                return {
                    payload: {
                        id: nanoid(),
                        title,
                        content,
                        date: new Date().toISOString(),
                        userId,
                        reactions: {
                            thumbsUp: 0,
                            wow: 0,
                            heart: 0,
                            rocket: 0,
                            coffee: 0
                        }
                    }
                }
            }
        },
        reactionAdded(state, action) {
            const { postId, reaction } = action.payload
            const existingPost = state.posts.find(post => post.id === postId)
            if (existingPost) {
                existingPost.reactions[reaction]++
            }
        }
    },
    extraReducers(builder) { //for asyncThunks which has .pending/.fulfilled/.rejected here you create logic to update/set state and show required frontend
        builder
            .addCase(fetchPosts.pending, (state, action) => {
                state.status = 'loading'
            })
            .addCase(fetchPosts.fulfilled, (state, action) => {
                state.status = 'succeeded'
                // Adding date and reactions
                let min = 1;
                const loadedPosts = action.payload.map(post => {
                    post.date = sub(new Date(), { minutes: min++ }).toISOString();
                    post.reactions = {
                        thumbsUp: 0,
                        wow: 0,
                        heart: 0,
                        rocket: 0,
                        coffee: 0
                    }
                    return post;
                });

                // Add any fetched posts to the array
                state.posts = state.posts.concat(loadedPosts)
            })
            .addCase(fetchPosts.rejected, (state, action) => {
                state.status = 'failed'
                state.error = action.error.message
            })
            .addCase(addNewPost.fulfilled, (state, action) => {
                // Fix for API post IDs:
                // Creating sortedPosts & assigning the id 
                // would be not be needed if the fake API 
                // returned accurate new post IDs
                const sortedPosts = state.posts.sort((a, b) => {
                    if (a.id > b.id) return 1
                    if (a.id < b.id) return -1
                    return 0
                })
                action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;
                // End fix for fake API post IDs 

                action.payload.userId = Number(action.payload.userId)
                action.payload.date = new Date().toISOString();
                action.payload.reactions = {
                    thumbsUp: 0,
                    wow: 0,
                    heart: 0,
                    rocket: 0,
                    coffee: 0
                }
                console.log(action.payload)
                state.posts.push(action.payload)
            })
            .addCase(updatePost.fulfilled, (state, action) => {
                if (!action.payload?.id) {
                    console.log('Update could not complete')
                    console.log(action.payload)
                    return;
                }
                const { id } = action.payload;
                action.payload.date = new Date().toISOString();
                const posts = state.posts.filter(post => post.id !== id); //filter logic to get state
                state.posts = [...posts, action.payload]; //spread operator + adding changed singular post payload
            })
            .addCase(deletePost.fulfilled, (state, action) => {
                if (!action.payload?.id) {
                    console.log('Delete could not complete')
                    console.log(action.payload)
                    return;
                }
                const { id } = action.payload;
                const posts = state.posts.filter(post => post.id !== id);
                state.posts = posts;
            })
    }
})

export const selectAllPosts = (state) => state.posts.posts; //this can be anywhere by place here so that we can use decriptive functions to get required state from the store
export const getPostsStatus = (state) => state.posts.status;
export const getPostsError = (state) => state.posts.error;

export const selectPostById = (state, postId) =>
    state.posts.posts.find(post => post.id === postId);

export const { postAdded, reactionAdded } = postsSlice.actions

export default postsSlice.reducer

--- a sample of a jsx that dispatches actions


import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";

import { addNewPost } from "./postsSlice";
import { selectAllUsers } from "../users/usersSlice";
import { useNavigate } from "react-router-dom";

const AddPostForm = () => {
	    const dispatch = useDispatch() //allows you to use reducer -> action built in slice

	    const navigate = useNavigate()

		    const [title, setTitle] = useState('') //local state
		    const [content, setContent] = useState('')
		    const [userId, setUserId] = useState('')
		    const [addRequestStatus, setAddRequestStatus] = useState('idle')

    	const users = useSelector(selectAllUsers) //use selector so that part of the state can be used within this jsx for logic -- you cannot update the state here/ store state can only be updated through reducer + action in slice unlike local state

    const onTitleChanged = e => setTitle(e.target.value)
    const onContentChanged = e => setContent(e.target.value)
    const onAuthorChanged = e => setUserId(e.target.value)


    const canSave = [title, content, userId].every(Boolean) && addRequestStatus === 'idle';

    const onSavePostClicked = () => {
        if (canSave) {
            try {
                setAddRequestStatus('pending')
                dispatch(addNewPost({ title, body: content, userId })).unwrap() //this is an async thunk which we can use unwrap to check for fulfilled or rejected use case

                setTitle('')
                setContent('')
                setUserId('')
                navigate('/')
            } catch (err) {
                console.error('Failed to save the post', err)
            } finally {
                setAddRequestStatus('idle')
            }
        }

    }

    const usersOptions = users.map(user => (
        <option key={user.id} value={user.id}>
            {user.name}
        </option>
    ))

    return (
        <section>
            <h2>Add a New Post</h2>
            <form>
                <label htmlFor="postTitle">Post Title:</label>
                <input
                    type="text"
                    id="postTitle"
                    name="postTitle"
                    value={title}
                    onChange={onTitleChanged}
                />
                <label htmlFor="postAuthor">Author:</label>
                <select id="postAuthor" value={userId} onChange={onAuthorChanged}>
                    <option value=""></option>
                    {usersOptions}
                </select>
                <label htmlFor="postContent">Content:</label>
                <textarea
                    id="postContent"
                    name="postContent"
                    value={content}
                    onChange={onContentChanged} //onChange of the element uses setState to value const onContentChanged = e => setContent(e.target.value) to update front end
                />
                <button
                    type="button"
                    onClick={onSavePostClicked}
                    disabled={!canSave}
                >Save Post</button>
            </form>
        </section>
    )
}
export default AddPostForm
